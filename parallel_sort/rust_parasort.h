/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_PARALLEL_SORT__
#define __RUST_PARALLEL_SORT__

#ifdef __cplusplus
extern "C" {
#endif


#include <stddef.h>
#include <stdint.h>

typedef struct Edge {

    int32_t a;

    int32_t b;

    double weight;

    double origin_weight;

    int32_t lca;

} Edge_t;

/** \brief
 *  `&'lt mut [T]` but with a guaranteed `#[repr(C)]` layout.
 * 
 *  # C layout (for some given type T)
 * 
 *  ```c
 *  typedef struct {
 *      // Cannot be NULL
 *      T * ptr;
 *      size_t len;
 *  } slice_T;
 *  ```
 * 
 *  # Nullable pointer?
 * 
 *  If you want to support the above typedef, but where the `ptr` field is
 *  allowed to be `NULL` (with the contents of `len` then being undefined)
 *  use the `Option< slice_ptr<_> >` type.
 */
typedef struct slice_mut_Edge {

    Edge_t * ptr;

    size_t len;

} slice_mut_Edge_t;

void parallel_sort_edges (
    slice_mut_Edge_t edges);

void sort_edges (
    slice_mut_Edge_t edges);


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* __RUST_PARALLEL_SORT__ */
